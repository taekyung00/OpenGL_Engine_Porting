/**
 * \file
 * \author Rudy Castan
 * \date 2025 Fall
 * \par CS200 Computer Graphics I
 * \copyright DigiPen Institute of Technology
 */

#include "DemoBufferTypes.hpp"

#include "CS200/NDC.hpp"
#include "CS200/Renderer2DUtils.hpp"
#include "CS200/RenderingAPI.hpp"
#include "Engine/Engine.hpp"
#include "Engine/GameStateManager.hpp"
#include "Engine/Random.hpp"
#include "Engine/Window.hpp"
#include "OpenGL/Buffer.hpp"
#include "OpenGL/GL.hpp"
#include "../Game/MainMenu.h"
#include <cmath>
#include <imgui.h>
#include <numbers>
#include <stb_perlin.h>

void DemoBufferTypes::Load()
{
    loadShaders();
    createVillagerModel();
    villagers.resize(32);
    currentDisplaySize = Engine::GetWindowEnvironment().DisplaySize;
    regenerate_all_villagers();
}

void DemoBufferTypes::Unload()
{
    OpenGL::DestroyShader(backgroundShader);
    OpenGL::DestroyShader(villagerShader);
    //GL::DeleteBuffers(1, &uniformBlock), uniformBlock                                   = 0;
    GL::DeleteVertexArrays(1, &background.modelHandle), background.modelHandle          = 0;
    GL::DeleteVertexArrays(1, &villager.modelHandle), villager.modelHandle              = 0;
    GL::DeleteBuffers(1, &background.vertexBufferHandle), background.vertexBufferHandle = 0;
    GL::DeleteBuffers(1, &villager.vertexBufferHandle), villager.vertexBufferHandle     = 0;
    GL::DeleteBuffers(1, &background.indexBufferHandle), background.indexBufferHandle   = 0;
    GL::DeleteBuffers(1, &villager.indexBufferHandle), villager.indexBufferHandle       = 0;
    background.indicesCount = 0;
    villager.indicesCount   = 0;
    backgroundVertices.clear();
    backgroundIndices.clear();
    villagers.clear();
}

void DemoBufferTypes::Update([[maybe_unused]]double dt)
{
    // Check for display size changes
    const auto newDisplaySize = Engine::GetWindowEnvironment().DisplaySize;
    if (newDisplaySize.x != currentDisplaySize.x || newDisplaySize.y != currentDisplaySize.y)
    {
        currentDisplaySize = newDisplaySize;
        regenerate_all_villagers();
    }

    updateBackgroundModel();

    updateNDCUniformValues();

    updateVillagers();
}

void DemoBufferTypes::Draw() 
{
    CS200::RenderingAPI::Clear();

    OpenGL::UpdateBufferData(OpenGL::BufferType::UniformBlocks, uniformBlock, std::as_bytes(std::span{ toNDC }));
    GL::BindBuffer(GL_UNIFORM_BUFFER, uniformBlock);

    GL::UseProgram(backgroundShader.Shader);
    drawObject(background);

    GL::UseProgram(villagerShader.Shader);

    for (const auto& villagerData : villagers)
    {
        if (!villagerData.shouldDraw)
            continue;
        const auto                 villager_to_world = Math::TranslationMatrix(villagerData.position) * Math::RotationMatrix(villagerData.rotation) * Math::ScaleMatrix(villagerData.scale);
        const std::array<float, 9> model_opengl_mat  = CS200::Renderer2DUtils::to_opengl_mat3(villager_to_world);

        GL::UniformMatrix3fv(villagerShader.UniformLocations.at("uModel"), 1, GL_FALSE, model_opengl_mat.data());
        drawObject(villager);
    }
}

void DemoBufferTypes::DrawImGui()
{
    const auto timing = Engine::GetWindowEnvironment();

    ImGui::Begin("Program Info");
    {
        ImGui::LabelText("FPS", "%.1f", static_cast<double>(timing.FPS));
        const std::size_t num_villagers = static_cast<std::size_t>(std::count_if(villagers.begin(), villagers.end(), [](const VillagerData& v) { return v.alive; }));
        ImGui::LabelText("Villagers", "%zu", num_villagers);

        if (num_villagers == MAX_NUMBER_VILLAGERS)
        {
            ImGui::BeginDisabled();
            ImGui::ArrowButton("+", ImGuiDir_Up);
            ImGui::EndDisabled();
        }
        else
        {
            if (const bool increase = ImGui::ArrowButton("+", ImGuiDir_Up); increase)
            {
                increase_number_of_villagers(num_villagers);
            }
        }
        ImGui::SameLine();
        if (num_villagers == 1)
        {
            ImGui::BeginDisabled();
            ImGui::ArrowButton("-", ImGuiDir_Down);
            ImGui::EndDisabled();
        }
        else
        {
            if (const bool decrease = ImGui::ArrowButton("-", ImGuiDir_Down); decrease)
            {
                decrease_number_of_villagers(num_villagers);
            }
        }

        if (ImGui::Button("Regenerate All"))
        {
            regenerate_all_villagers();
        }

        ImGui::SeparatorText("Switch Demo");
        if (ImGui::Button("Switch to MainMenu"))
        {
            Engine::GetGameStateManager().PopState();
            Engine::GetGameStateManager().PushState<MainMenu>();
        }


    }
    ImGui::End();
}

gsl::czstring DemoBufferTypes::GetName() const
{
    return "Demo Buffer Types";
}

void DemoBufferTypes::loadShaders()
{
    using filepath   = std::filesystem::path;
    // Engine::GetLogger().LogDebug("before make shaders");
    backgroundShader = OpenGL::CreateShader(filepath{ "Assets/shaders/DemoBufferTypes/background.vert" }, filepath{ "Assets/shaders/DemoBufferTypes/background.frag" });
    villagerShader   = OpenGL::CreateShader(filepath{ "Assets/shaders/DemoBufferTypes/villager.vert" }, filepath{ "Assets/shaders/DemoBufferTypes/villager.frag" });
    // Engine::GetLogger().LogDebug("after make shaders");
    uniformBlock     = OpenGL::CreateBuffer(OpenGL::BufferType::UniformBlocks, sizeof(toNDC));
    OpenGL::BindUniformBufferToShader(backgroundShader.Shader, 0, uniformBlock, "NDC");
    OpenGL::BindUniformBufferToShader(villagerShader.Shader, 0, uniformBlock, "NDC");
}

void DemoBufferTypes::createVillagerModel()
{
    // x,y,r,g,b
    constexpr float vertices[] = {
        0.050063f,  0.429912f,  0.474510f,  0.349020f,  0.188235f,  0.092616f,  0.477472f,  0.474510f,  0.349020f,  0.188235f,  0.017522f,  0.498748f,  0.474510f,  0.349020f,  0.188235f,  -0.057572f,
        0.429912f,  0.529412f,  0.384314f,  0.207843f,  0.017522f,  0.498748f,  0.529412f,  0.384314f,  0.207843f,  -0.065707f, 0.500000f,  0.529412f,  0.384314f,  0.207843f,  -0.138924f, 0.486233f,
        0.533333f,  0.392157f,  0.211765f,  -0.057572f, 0.429912f,  0.533333f,  0.392157f,  0.211765f,  -0.065707f, 0.500000f,  0.533333f,  0.392157f,  0.211765f,  -0.206508f, 0.447434f,  0.537255f,
        0.388235f,  0.211765f,  -0.152691f, 0.409887f,  0.537255f,  0.388235f,  0.211765f,  -0.138924f, 0.486233f,  0.537255f,  0.388235f,  0.211765f,  -0.057572f, 0.429912f,  0.470588f,  0.345098f,
        0.188235f,  0.050063f,  0.429912f,  0.470588f,  0.345098f,  0.188235f,  0.017522f,  0.498748f,  0.470588f,  0.345098f,  0.188235f,  0.143930f,  0.396120f,  0.329412f,  0.243137f,  0.133333f,
        0.182729f,  0.397372f,  0.329412f,  0.243137f,  0.133333f,  0.145182f,  0.447434f,  0.329412f,  0.243137f,  0.133333f,  -0.152691f, 0.409887f,  0.525490f,  0.384314f,  0.207843f,  -0.057572f,
        0.429912f,  0.525490f,  0.384314f,  0.207843f,  -0.138924f, 0.486233f,  0.525490f,  0.384314f,  0.207843f,  0.050063f,  0.429912f,  0.400000f,  0.294118f,  0.156863f,  0.145182f,  0.447434f,
        0.400000f,  0.294118f,  0.156863f,  0.092616f,  0.477472f,  0.400000f,  0.294118f,  0.156863f,  -0.057572f, 0.429912f,  0.384314f,  0.278431f,  0.149020f,  0.011264f,  0.374844f,  0.384314f,
        0.278431f,  0.149020f,  0.050063f,  0.429912f,  0.384314f,  0.278431f,  0.149020f,  0.050063f,  0.429912f,  0.356863f,  0.258824f,  0.141176f,  0.143930f,  0.396120f,  0.356863f,  0.258824f,
        0.141176f,  0.145182f,  0.447434f,  0.356863f,  0.258824f,  0.141176f,  0.050063f,  0.429912f,  0.239216f,  0.176471f,  0.094118f,  0.110138f,  0.371089f,  0.239216f,  0.176471f,  0.094118f,
        0.143930f,  0.396120f,  0.239216f,  0.176471f,  0.094118f,  -0.152691f, 0.409887f,  0.478431f,  0.349020f,  0.184314f,  -0.096371f, 0.363579f,  0.478431f,  0.349020f,  0.184314f,  -0.057572f,
        0.429912f,  0.478431f,  0.349020f,  0.184314f,  -0.247810f, 0.384856f,  0.482353f,  0.352941f,  0.192157f,  -0.152691f, 0.409887f,  0.482353f,  0.352941f,  0.192157f,  -0.206508f, 0.447434f,
        0.482353f,  0.352941f,  0.192157f,  0.143930f,  0.396120f,  0.274510f,  0.203922f,  0.109804f,  0.172716f,  0.346058f,  0.274510f,  0.203922f,  0.109804f,  0.182729f,  0.397372f,  0.274510f,
        0.203922f,  0.109804f,  -0.247810f, 0.384856f,  0.403922f,  0.298039f,  0.160784f,  -0.191490f, 0.344806f,  0.403922f,  0.298039f,  0.160784f,  -0.152691f, 0.409887f,  0.403922f,  0.298039f,
        0.160784f,  0.011264f,  0.374844f,  0.376471f,  0.274510f,  0.149020f,  0.110138f,  0.371089f,  0.376471f,  0.274510f,  0.149020f,  0.050063f,  0.429912f,  0.376471f,  0.274510f,  0.149020f,
        0.172716f,  0.346058f,  0.274510f,  0.200000f,  0.109804f,  0.214018f,  0.329787f,  0.274510f,  0.200000f,  0.109804f,  0.182729f,  0.397372f,  0.274510f,  0.200000f,  0.109804f,  0.110138f,
        0.371089f,  0.270588f,  0.200000f,  0.109804f,  0.172716f,  0.346058f,  0.270588f,  0.200000f,  0.109804f,  0.143930f,  0.396120f,  0.270588f,  0.200000f,  0.109804f,  0.011264f,  0.374844f,
        0.325490f,  0.239216f,  0.133333f,  0.066333f,  0.328536f,  0.325490f,  0.239216f,  0.133333f,  0.110138f,  0.371089f,  0.325490f,  0.239216f,  0.133333f,  -0.096371f, 0.363579f,  0.407843f,
        0.298039f,  0.160784f,  0.011264f,  0.374844f,  0.407843f,  0.298039f,  0.160784f,  -0.057572f, 0.429912f,  0.407843f,  0.298039f,  0.160784f,  -0.096371f, 0.363579f,  0.439216f,  0.317647f,
        0.172549f,  -0.041302f, 0.319775f,  0.439216f,  0.317647f,  0.172549f,  0.011264f,  0.374844f,  0.439216f,  0.317647f,  0.172549f,  0.110138f,  0.371089f,  0.266667f,  0.200000f,  0.109804f,
        0.151439f,  0.321026f,  0.266667f,  0.200000f,  0.109804f,  0.172716f,  0.346058f,  0.266667f,  0.200000f,  0.109804f,  -0.191490f, 0.344806f,  0.454902f,  0.329412f,  0.180392f,  -0.096371f,
        0.363579f,  0.454902f,  0.329412f,  0.180392f,  -0.152691f, 0.409887f,  0.454902f,  0.329412f,  0.180392f,  -0.246558f, 0.311014f,  0.360784f,  0.262745f,  0.145098f,  -0.191490f, 0.344806f,
        0.360784f,  0.262745f,  0.145098f,  -0.247810f, 0.384856f,  0.360784f,  0.262745f,  0.145098f,  -0.148936f, 0.306008f,  0.400000f,  0.294118f,  0.160784f,  -0.096371f, 0.363579f,  0.400000f,
        0.294118f,  0.160784f,  -0.191490f, 0.344806f,  0.400000f,  0.294118f,  0.160784f,  0.172716f,  0.346058f,  0.278431f,  0.203922f,  0.113725f,  0.198999f,  0.292240f,  0.278431f,  0.203922f,
        0.113725f,  0.214018f,  0.329787f,  0.278431f,  0.203922f,  0.113725f,  0.016270f,  0.287234f,  0.952941f,  0.709804f,  0.560784f,  0.066333f,  0.328536f,  0.952941f,  0.709804f,  0.560784f,
        0.011264f,  0.374844f,  0.952941f,  0.709804f,  0.560784f,  0.151439f,  0.321026f,  0.901961f,  0.650980f,  0.513725f,  0.198999f,  0.292240f,  0.901961f,  0.650980f,  0.513725f,  0.172716f,
        0.346058f,  0.901961f,  0.650980f,  0.513725f,  0.066333f,  0.328536f,  0.854902f,  0.572549f,  0.447059f,  0.151439f,  0.321026f,  0.854902f,  0.572549f,  0.447059f,  0.110138f,  0.371089f,
        0.854902f,  0.572549f,  0.447059f,  -0.041302f, 0.319775f,  0.984314f,  0.815686f,  0.678431f,  0.016270f,  0.287234f,  0.984314f,  0.815686f,  0.678431f,  0.011264f,  0.374844f,  0.984314f,
        0.815686f,  0.678431f,  -0.090113f, 0.285982f,  0.992157f,  0.862745f,  0.733333f,  -0.041302f, 0.319775f,  0.992157f,  0.862745f,  0.733333f,  -0.096371f, 0.363579f,  0.992157f,  0.862745f,
        0.733333f,  0.066333f,  0.328536f,  0.960784f,  0.713725f,  0.560784f,  0.110138f,  0.284731f,  0.960784f,  0.713725f,  0.560784f,  0.151439f,  0.321026f,  0.960784f,  0.713725f,  0.560784f,
        0.198999f,  0.292240f,  0.231373f,  0.168627f,  0.094118f,  0.219024f,  0.284731f,  0.231373f,  0.168627f,  0.094118f,  0.214018f,  0.329787f,  0.231373f,  0.168627f,  0.094118f,  0.081352f,
        0.290989f,  0.972549f,  0.705882f,  0.545098f,  0.110138f,  0.284731f,  0.972549f,  0.705882f,  0.545098f,  0.066333f,  0.328536f,  0.972549f,  0.705882f,  0.545098f,  -0.224030f, 0.284731f,
        0.250980f,  0.184314f,  0.098039f,  -0.191490f, 0.344806f,  0.250980f,  0.184314f,  0.098039f,  -0.246558f, 0.311014f,  0.250980f,  0.184314f,  0.098039f,  -0.247810f, 0.384856f,  0.266667f,
        0.196078f,  0.105882f,  -0.272841f, 0.288486f,  0.266667f,  0.196078f,  0.105882f,  -0.246558f, 0.311014f,  0.266667f,  0.196078f,  0.105882f,  -0.272841f, 0.288486f,  0.219608f,  0.160784f,
        0.086275f,  -0.247810f, 0.285982f,  0.219608f,  0.160784f,  0.086275f,  -0.246558f, 0.311014f,  0.219608f,  0.160784f,  0.086275f,  -0.148936f, 0.306008f,  0.988235f,  0.870588f,  0.749020f,
        -0.090113f, 0.285982f,  0.988235f,  0.870588f,  0.749020f,  -0.096371f, 0.363579f,  0.988235f,  0.870588f,  0.749020f,  -0.247810f, 0.285982f,  0.952941f,  0.780392f,  0.623529f,  -0.224030f,
        0.284731f,  0.952941f,  0.780392f,  0.623529f,  -0.246558f, 0.311014f,  0.952941f,  0.780392f,  0.623529f,  0.055069f,  0.279807f,  0.976471f,  0.717647f,  0.556863f,  0.081352f,  0.290989f,
        0.976471f,  0.717647f,  0.556863f,  0.066333f,  0.328536f,  0.976471f,  0.717647f,  0.556863f,  0.016270f,  0.287234f,  0.984314f,  0.756863f,  0.596078f,  0.055069f,  0.279807f,  0.984314f,
        0.756863f,  0.596078f,  0.066333f,  0.328536f,  0.984314f,  0.756863f,  0.596078f,  0.082603f,  0.277222f,  0.584314f,  0.305882f,  0.192157f,  0.110138f,  0.284731f,  0.584314f,  0.305882f,
        0.192157f,  0.081352f,  0.290989f,  0.584314f,  0.305882f,  0.192157f,  0.055069f,  0.279807f,  0.415686f,  0.133333f,  0.043137f,  0.082603f,  0.277222f,  0.415686f,  0.133333f,  0.043137f,
        0.081352f,  0.290989f,  0.415686f,  0.133333f,  0.043137f,  0.060075f,  0.270964f,  0.372549f,  0.082353f,  0.003922f,  0.082603f,  0.277222f,  0.372549f,  0.082353f,  0.003922f,  0.055069f,
        0.279807f,  0.372549f,  0.082353f,  0.003922f,  0.082603f,  0.277222f,  0.376471f,  0.086275f,  0.003922f,  0.103880f,  0.269712f,  0.376471f,  0.086275f,  0.003922f,  0.110138f,  0.284731f,
        0.376471f,  0.086275f,  0.003922f,  -0.148936f, 0.306008f,  0.996078f,  0.898039f,  0.772549f,  -0.111225f, 0.265957f,  0.996078f,  0.898039f,  0.772549f,  -0.090113f, 0.285982f,  0.996078f,
        0.898039f,  0.772549f,  -0.224030f, 0.284731f,  0.949020f,  0.776471f,  0.658824f,  -0.148936f, 0.306008f,  0.949020f,  0.776471f,  0.658824f,  -0.191490f, 0.344806f,  0.949020f,  0.776471f,
        0.658824f,  0.133917f,  0.262203f,  0.964706f,  0.741176f,  0.600000f,  0.151439f,  0.321026f,  0.964706f,  0.741176f,  0.600000f,  0.110138f,  0.284731f,  0.964706f,  0.741176f,  0.600000f,
        -0.145100f, 0.268543f,  0.996078f,  0.905882f,  0.784314f,  -0.111225f, 0.265957f,  0.996078f,  0.905882f,  0.784314f,  -0.148936f, 0.306008f,  0.996078f,  0.905882f,  0.784314f,  -0.224030f,
        0.284731f,  0.996078f,  0.886275f,  0.756863f,  -0.178974f, 0.260951f,  0.996078f,  0.886275f,  0.756863f,  -0.148936f, 0.306008f,  0.996078f,  0.886275f,  0.756863f,  0.060075f,  0.270964f,
        0.960784f,  0.909804f,  0.909804f,  0.075094f,  0.258448f,  0.960784f,  0.909804f,  0.909804f,  0.082603f,  0.277222f,  0.960784f,  0.909804f,  0.909804f,  -0.178974f, 0.260951f,  0.996078f,
        0.913725f,  0.792157f,  -0.145100f, 0.268543f,  0.996078f,  0.913725f,  0.792157f,  -0.148936f, 0.306008f,  0.996078f,  0.913725f,  0.792157f,  -0.272841f, 0.288486f,  0.250980f,  0.184314f,
        0.101961f,  -0.252816f, 0.259700f,  0.250980f,  0.184314f,  0.101961f,  -0.247810f, 0.285982f,  0.250980f,  0.184314f,  0.101961f,  0.103880f,  0.269712f,  0.431373f,  0.149020f,  0.058824f,
        0.133917f,  0.262203f,  0.431373f,  0.149020f,  0.058824f,  0.110138f,  0.284731f,  0.431373f,  0.149020f,  0.058824f,  0.103880f,  0.269712f,  0.466667f,  0.184314f,  0.090196f,  0.125156f,
        0.253442f,  0.466667f,  0.184314f,  0.090196f,  0.133917f,  0.262203f,  0.466667f,  0.184314f,  0.090196f,  0.031207f,  0.252272f,  0.988235f,  0.784314f,  0.627451f,  0.055069f,  0.279807f,
        0.988235f,  0.784314f,  0.627451f,  0.016270f,  0.287234f,  0.988235f,  0.784314f,  0.627451f,  -0.252816f, 0.259700f,  0.972549f,  0.725490f,  0.572549f,  -0.224030f, 0.284731f,  0.972549f,
        0.725490f,  0.572549f,  -0.247810f, 0.285982f,  0.972549f,  0.725490f,  0.572549f,  0.201502f,  0.249687f,  0.188235f,  0.133333f,  0.074510f,  0.219024f,  0.284731f,  0.188235f,  0.133333f,
        0.074510f,  0.198999f,  0.292240f,  0.188235f,  0.133333f,  0.074510f,  0.133917f,  0.262203f,  0.960784f,  0.760784f,  0.623529f,  0.198999f,  0.292240f,  0.960784f,  0.760784f,  0.623529f,
        0.151439f,  0.321026f,  0.960784f,  0.760784f,  0.623529f,  0.031207f,  0.252272f,  0.407843f,  0.117647f,  0.031373f,  0.060075f,  0.270964f,  0.407843f,  0.117647f,  0.031373f,  0.055069f,
        0.279807f,  0.407843f,  0.117647f,  0.031373f,  0.075094f,  0.258448f,  0.921569f,  0.870588f,  0.874510f,  0.103880f,  0.269712f,  0.921569f,  0.870588f,  0.874510f,  0.082603f,  0.277222f,
        0.921569f,  0.870588f,  0.874510f,  0.041302f,  0.247184f,  0.478431f,  0.258824f,  0.180392f,  0.060075f,  0.270964f,  0.478431f,  0.258824f,  0.180392f,  0.031207f,  0.252272f,  0.478431f,
        0.258824f,  0.180392f,  -0.145100f, 0.268543f,  0.533333f,  0.309804f,  0.203922f,  -0.118735f, 0.249687f,  0.533333f,  0.309804f,  0.203922f,  -0.111225f, 0.265957f,  0.533333f,  0.309804f,
        0.203922f,  -0.142597f, 0.253360f,  0.466667f,  0.231373f,  0.137255f,  -0.118735f, 0.249687f,  0.466667f,  0.231373f,  0.137255f,  -0.145100f, 0.268543f,  0.466667f,  0.231373f,  0.137255f,
        -0.171465f, 0.248436f,  0.443137f,  0.196078f,  0.090196f,  -0.145100f, 0.268543f,  0.443137f,  0.196078f,  0.090196f,  -0.178974f, 0.260951f,  0.443137f,  0.196078f,  0.090196f,  -0.033792f,
        0.243429f,  0.996078f,  0.835294f,  0.694118f,  0.016270f,  0.287234f,  0.996078f,  0.835294f,  0.694118f,  -0.041302f, 0.319775f,  0.996078f,  0.835294f,  0.694118f,  -0.171465f, 0.248436f,
        0.478431f,  0.250980f,  0.164706f,  -0.142597f, 0.253360f,  0.478431f,  0.250980f,  0.164706f,  -0.145100f, 0.268543f,  0.478431f,  0.250980f,  0.164706f,  -0.088779f, 0.240844f,  1.000000f,
        0.878431f,  0.749020f,  -0.090113f, 0.285982f,  1.000000f,  0.878431f,  0.749020f,  -0.111225f, 0.265957f,  1.000000f,  0.878431f,  0.749020f,  -0.090113f, 0.285982f,  1.000000f,  0.874510f,
        0.721569f,  -0.033792f, 0.243429f,  1.000000f,  0.874510f,  0.721569f,  -0.041302f, 0.319775f,  1.000000f,  0.874510f,  0.721569f,  -0.171465f, 0.248436f,  1.000000f,  0.988235f,  0.988235f,
        -0.156446f, 0.239675f,  1.000000f,  0.988235f,  0.988235f,  -0.142597f, 0.253360f,  1.000000f,  0.988235f,  0.988235f,  -0.272841f, 0.288486f,  0.278431f,  0.207843f,  0.109804f,  -0.274093f,
        0.238423f,  0.278431f,  0.207843f,  0.109804f,  -0.252816f, 0.259700f,  0.278431f,  0.207843f,  0.109804f,  -0.111225f, 0.265957f,  0.443137f,  0.196078f,  0.090196f,  -0.100207f, 0.235920f,
        0.443137f,  0.196078f,  0.090196f,  -0.088779f, 0.240844f,  0.443137f,  0.196078f,  0.090196f,  -0.118735f, 0.249687f,  0.525490f,  0.301961f,  0.196078f,  -0.100207f, 0.235920f,  0.525490f,
        0.301961f,  0.196078f,  -0.111225f, 0.265957f,  0.525490f,  0.301961f,  0.196078f,  0.041302f,  0.247184f,  0.968627f,  0.925490f,  0.925490f,  0.075094f,  0.258448f,  0.968627f,  0.925490f,
        0.925490f,  0.060075f,  0.270964f,  0.968627f,  0.925490f,  0.925490f,  0.133917f,  0.262203f,  0.984314f,  0.792157f,  0.654902f,  0.201502f,  0.249687f,  0.984314f,  0.792157f,  0.654902f,
        0.198999f,  0.292240f,  0.984314f,  0.792157f,  0.654902f,  0.214018f,  0.234668f,  0.301961f,  0.203922f,  0.129412f,  0.219024f,  0.284731f,  0.301961f,  0.203922f,  0.129412f,  0.201502f,
        0.249687f,  0.301961f,  0.203922f,  0.129412f,  -0.274093f, 0.238423f,  0.203922f,  0.145098f,  0.078431f,  -0.252816f, 0.233417f,  0.203922f,  0.145098f,  0.078431f,  -0.252816f, 0.259700f,
        0.203922f,  0.145098f,  0.078431f,  0.214018f,  0.234668f,  0.909804f,  0.607843f,  0.454902f,  0.255319f,  0.272215f,  0.909804f,  0.607843f,  0.454902f,  0.219024f,  0.284731f,  0.909804f,
        0.607843f,  0.454902f,  -0.088779f, 0.240844f,  1.000000f,  0.858824f,  0.721569f,  -0.033792f, 0.243429f,  1.000000f,  0.858824f,  0.721569f,  -0.090113f, 0.285982f,  1.000000f,  0.858824f,
        0.721569f,  -0.196578f, 0.228411f,  0.415686f,  0.160784f,  0.058824f,  -0.171465f, 0.248436f,  0.415686f,  0.160784f,  0.058824f,  -0.178974f, 0.260951f,  0.415686f,  0.160784f,  0.058824f,
        -0.196578f, 0.228411f,  0.439216f,  0.188235f,  0.074510f,  -0.183980f, 0.227159f,  0.439216f,  0.188235f,  0.074510f,  -0.171465f, 0.248436f,  0.439216f,  0.188235f,  0.074510f,  -0.224030f,
        0.284731f,  1.000000f,  0.898039f,  0.772549f,  -0.196578f, 0.228411f,  1.000000f,  0.898039f,  0.772549f,  -0.178974f, 0.260951f,  1.000000f,  0.898039f,  0.772549f,  -0.033792f, 0.243429f,
        0.996078f,  0.819608f,  0.670588f,  0.031207f,  0.252272f,  0.996078f,  0.819608f,  0.670588f,  0.016270f,  0.287234f,  0.996078f,  0.819608f,  0.670588f,  0.041302f,  0.247184f,  0.972549f,
        0.929412f,  0.929412f,  0.067584f,  0.224656f,  0.972549f,  0.929412f,  0.929412f,  0.075094f,  0.258448f,  0.972549f,  0.929412f,  0.929412f,  0.142678f,  0.223404f,  0.725490f,  0.466667f,
        0.349020f,  0.133917f,  0.262203f,  0.725490f,  0.466667f,  0.349020f,  0.125156f,  0.253442f,  0.725490f,  0.466667f,  0.349020f,  0.130163f,  0.218398f,  0.447059f,  0.164706f,  0.066667f,
        0.142678f,  0.223404f,  0.447059f,  0.164706f,  0.066667f,  0.125156f,  0.253442f,  0.447059f,  0.164706f,  0.066667f,  -0.252816f, 0.259700f,  1.000000f,  0.862745f,  0.709804f,  -0.196578f,
        0.228411f,  1.000000f,  0.862745f,  0.709804f,  -0.224030f, 0.284731f,  1.000000f,  0.862745f,  0.709804f,  -0.183980f, 0.227159f,  0.976471f,  0.976471f,  0.976471f,  -0.156446f, 0.239675f,
        0.976471f,  0.976471f,  0.976471f,  -0.171465f, 0.248436f,  0.976471f,  0.976471f,  0.976471f,  -0.252816f, 0.233417f,  1.000000f,  0.815686f,  0.643137f,  -0.196578f, 0.228411f,  1.000000f,
        0.815686f,  0.643137f,  -0.252816f, 0.259700f,  1.000000f,  0.815686f,  0.643137f,  0.142678f,  0.223404f,  0.976471f,  0.764706f,  0.619608f,  0.201502f,  0.249687f,  0.976471f,  0.764706f,
        0.619608f,  0.133917f,  0.262203f,  0.976471f,  0.764706f,  0.619608f,  0.026365f,  0.213310f,  0.427451f,  0.152941f,  0.070588f,  0.041302f,  0.247184f,  0.427451f,  0.152941f,  0.070588f,
        0.031207f,  0.252272f,  0.427451f,  0.152941f,  0.070588f,  0.038798f,  0.212058f,  0.427451f,  0.152941f,  0.070588f,  0.041302f,  0.247184f,  0.427451f,  0.152941f,  0.070588f,  0.075094f,
        0.258448f,  0.000000f,  0.000000f,  0.000000f,  0.125156f,  0.253442f,  0.000000f,  0.000000f,  0.000000f,  0.103880f,  0.269712f,  0.000000f,  0.000000f,  0.000000f,  0.038798f,  0.212058f,
        0.976471f,  0.933333f,  0.933333f,  0.067584f,  0.224656f,  0.976471f,  0.933333f,  0.933333f,  0.041302f,  0.247184f,  0.976471f,  0.933333f,  0.933333f,  0.214018f,  0.234668f,  0.929412f,
        0.631373f,  0.478431f,  0.255319f,  0.208385f,  0.929412f,  0.631373f,  0.478431f,  0.255319f,  0.272215f,  0.929412f,  0.631373f,  0.478431f,  -0.156446f, 0.239675f,  0.000000f,  0.000000f,
        0.000000f,  -0.118735f, 0.249687f,  0.000000f,  0.000000f,  0.000000f,  -0.142597f, 0.253360f,  0.000000f,  0.000000f,  0.000000f,  0.067584f,  0.224656f,  0.000000f,  0.000000f,  0.000000f,
        -0.242804f, 0.209637f,  1.000000f,  0.819608f,  0.650980f,  -0.196578f, 0.228411f,  1.000000f,  0.819608f,  0.650980f,  -0.252816f, 0.233417f,  1.000000f,  0.819608f,  0.650980f,  -0.100207f,
        0.235920f,  0.392157f,  0.137255f,  0.035294f,  -0.082603f, 0.202128f,  0.392157f,  0.137255f,  0.035294f,  -0.088779f, 0.240844f,  0.392157f,  0.137255f,  0.035294f,  -0.183980f, 0.227159f,
        1.000000f,  0.988235f,  0.988235f,  -0.160200f, 0.202128f,  1.000000f,  0.988235f,  0.988235f,  -0.156446f, 0.239675f,  1.000000f,  0.988235f,  0.988235f,  -0.033792f, 0.243429f,  0.996078f,
        0.815686f,  0.666667f,  0.026365f,  0.213310f,  0.996078f,  0.815686f,  0.666667f,  0.031207f,  0.252272f,  0.996078f,  0.815686f,  0.666667f,  0.130163f,  0.218398f,  0.000000f,  0.000000f,
        0.000000f,  -0.095119f, 0.198373f,  0.400000f,  0.145098f,  0.047059f,  -0.082603f, 0.202128f,  0.400000f,  0.145098f,  0.047059f,  -0.100207f, 0.235920f,  0.400000f,  0.145098f,  0.047059f,
        -0.252816f, 0.233417f,  0.466667f,  0.329412f,  0.247059f,  -0.259074f, 0.194618f,  0.466667f,  0.329412f,  0.247059f,  -0.242804f, 0.209637f,  0.466667f,  0.329412f,  0.247059f,  -0.082603f,
        0.202128f,  1.000000f,  0.854902f,  0.717647f,  -0.033792f, 0.243429f,  1.000000f,  0.854902f,  0.717647f,  -0.088779f, 0.240844f,  1.000000f,  0.854902f,  0.717647f,  -0.274093f, 0.238423f,
        0.203922f,  0.141176f,  0.074510f,  -0.259074f, 0.194618f,  0.203922f,  0.141176f,  0.074510f,  -0.252816f, 0.233417f,  0.203922f,  0.141176f,  0.074510f,  -0.197747f, 0.192115f,  0.513725f,
        0.254902f,  0.109804f,  -0.183980f, 0.227159f,  0.513725f,  0.254902f,  0.109804f,  -0.196578f, 0.228411f,  0.513725f,  0.254902f,  0.109804f,  -0.197747f, 0.192115f,  0.525490f,  0.247059f,
        0.062745f,  -0.187735f, 0.190864f,  0.525490f,  0.247059f,  0.062745f,  -0.183980f, 0.227159f,  0.525490f,  0.247059f,  0.062745f,  -0.187735f, 0.190864f,  0.976471f,  0.976471f,  0.976471f,
        -0.160200f, 0.202128f,  0.976471f,  0.976471f,  0.976471f,  -0.183980f, 0.227159f,  0.976471f,  0.976471f,  0.976471f,  -0.302879f, 0.214643f,  0.968627f,  0.737255f,  0.588235f,  -0.259074f,
        0.194618f,  0.968627f,  0.737255f,  0.588235f,  -0.274093f, 0.238423f,  0.968627f,  0.737255f,  0.588235f,  0.130163f,  0.218398f,  0.596078f,  0.333333f,  0.192157f,  0.143930f,  0.187109f,
        0.596078f,  0.333333f,  0.192157f,  0.142678f,  0.223404f,  0.596078f,  0.333333f,  0.192157f,  -0.242804f, 0.209637f,  1.000000f,  0.886275f,  0.752941f,  -0.197747f, 0.192115f,  1.000000f,
        0.886275f,  0.752941f,  -0.196578f, 0.228411f,  1.000000f,  0.886275f,  0.752941f,  -0.160200f, 0.202128f,  0.000000f,  0.000000f,  0.000000f,  -0.118735f, 0.249687f,  0.000000f,  0.000000f,
        0.000000f,  -0.156446f, 0.239675f,  0.000000f,  0.000000f,  0.000000f,  -0.100207f, 0.235920f,  0.000000f,  0.000000f,  0.000000f,  0.142678f,  0.223404f,  0.984314f,  0.788235f,  0.647059f,
        0.214018f,  0.234668f,  0.984314f,  0.788235f,  0.647059f,  0.201502f,  0.249687f,  0.984314f,  0.788235f,  0.647059f,  0.110138f,  0.183354f,  0.000000f,  0.000000f,  0.000000f,  0.131414f,
        0.180851f,  0.596078f,  0.333333f,  0.192157f,  0.143930f,  0.187109f,  0.596078f,  0.333333f,  0.192157f,  0.087610f,  0.182103f,  0.000000f,  0.000000f,  0.000000f,  0.110138f,  0.183354f,
        0.976471f,  0.937255f,  0.937255f,  0.131414f,  0.180851f,  0.976471f,  0.937255f,  0.937255f,  0.130163f,  0.218398f,  0.976471f,  0.937255f,  0.937255f,  -0.095119f, 0.198373f,  0.000000f,
        0.000000f,  0.000000f,  -0.027535f, 0.182103f,  0.968627f,  0.815686f,  0.654902f,  0.026365f,  0.213310f,  0.968627f,  0.815686f,  0.654902f,  -0.033792f, 0.243429f,  0.968627f,  0.815686f,
        0.654902f,  -0.082603f, 0.202128f,  1.000000f,  0.854902f,  0.713725f,  -0.027535f, 0.182103f,  1.000000f,  0.854902f,  0.713725f,  -0.033792f, 0.243429f,  1.000000f,  0.854902f,  0.713725f,
        0.029873f,  0.173342f,  0.400000f,  0.117647f,  0.011765f,  0.038798f,  0.212058f,  0.400000f,  0.117647f,  0.011765f,  0.026365f,  0.213310f,  0.400000f,  0.117647f,  0.011765f,  0.029873f,
        0.173342f,  0.509804f,  0.266667f,  0.133333f,  0.042553f,  0.173342f,  0.509804f,  0.266667f,  0.133333f,  0.038798f,  0.212058f,  0.509804f,  0.266667f,  0.133333f,  0.038798f,  0.212058f,
        0.949020f,  0.949020f,  0.949020f,  0.087610f,  0.182103f,  0.949020f,  0.949020f,  0.949020f,  0.067584f,  0.224656f,  0.949020f,  0.949020f,  0.949020f,  0.142678f,  0.223404f,  0.972549f,
        0.764706f,  0.619608f,  0.201502f,  0.172090f,  0.972549f,  0.764706f,  0.619608f,  0.214018f,  0.234668f,  0.972549f,  0.764706f,  0.619608f,  0.042553f,  0.173342f,  0.976471f,  0.933333f,
        0.933333f,  0.087610f,  0.182103f,  0.976471f,  0.933333f,  0.933333f,  0.201502f,  0.172090f,  0.925490f,  0.627451f,  0.478431f,  0.255319f,  0.208385f,  0.925490f,  0.627451f,  0.478431f,
        0.214018f,  0.234668f,  0.925490f,  0.627451f,  0.478431f,  0.143930f,  0.187109f,  0.972549f,  0.749020f,  0.603922f,  0.201502f,  0.172090f,  0.972549f,  0.749020f,  0.603922f,  0.142678f,
        0.223404f,  0.972549f,  0.749020f,  0.603922f,  -0.095119f, 0.198373f,  0.603922f,  0.384314f,  0.258824f,  -0.082603f, 0.165668f,  0.603922f,  0.384314f,  0.258824f,  -0.082603f, 0.202128f,
        0.603922f,  0.384314f,  0.258824f,  -0.111389f, 0.168335f,  0.000000f,  0.000000f,  0.000000f,  -0.095119f, 0.198373f,  0.000000f,  0.000000f,  0.000000f,  -0.092698f, 0.163329f,  0.584314f,
        0.349020f,  0.188235f,  -0.082603f, 0.165668f,  0.584314f,  0.349020f,  0.188235f,  -0.095119f, 0.198373f,  0.584314f,  0.349020f,  0.188235f,  0.095119f,  0.163329f,  0.960784f,  0.909804f,
        0.909804f,  0.110138f,  0.183354f,  0.960784f,  0.909804f,  0.909804f,  0.087610f,  0.182103f,  0.960784f,  0.909804f,  0.909804f,  -0.111389f, 0.168335f,  1.000000f,  0.988235f,  0.988235f,
        -0.092698f, 0.163329f,  1.000000f,  0.988235f,  0.988235f,  -0.095119f, 0.198373f,  1.000000f,  0.988235f,  0.988235f,  -0.140175f, 0.163329f,  0.000000f,  0.000000f,  0.000000f,  -0.027535f,
        0.182103f,  0.996078f,  0.815686f,  0.666667f,  0.029873f,  0.173342f,  0.996078f,  0.815686f,  0.666667f,  -0.082603f, 0.165668f,  1.000000f,  0.854902f,  0.713725f,  -0.302879f, 0.214643f,
        0.972549f,  0.745098f,  0.600000f,  -0.284105f, 0.152065f,  0.972549f,  0.745098f,  0.600000f,  -0.259074f, 0.194618f,  0.972549f,  0.745098f,  0.600000f,  -0.190238f, 0.150814f,  0.607843f,
        0.360784f,  0.184314f,  -0.178892f, 0.152065f,  0.607843f,  0.360784f,  0.184314f,  -0.187735f, 0.190864f,  0.607843f,  0.360784f,  0.184314f,  -0.197747f, 0.192115f,  0.729412f,  0.521569f,
        0.356863f,  -0.190238f, 0.150814f,  0.729412f,  0.521569f,  0.356863f,  -0.187735f, 0.190864f,  0.729412f,  0.521569f,  0.356863f,  -0.178892f, 0.152065f,  1.000000f,  0.988235f,  0.988235f,
        -0.160200f, 0.202128f,  1.000000f,  0.988235f,  0.988235f,  -0.187735f, 0.190864f,  1.000000f,  0.988235f,  0.988235f,  -0.178892f, 0.152065f,  0.976471f,  0.976471f,  0.976471f,  -0.140175f,
        0.163329f,  0.976471f,  0.976471f,  0.976471f,  -0.259074f, 0.194618f,  1.000000f,  0.815686f,  0.647059f,  -0.197747f, 0.192115f,  1.000000f,  0.815686f,  0.647059f,  -0.242804f, 0.209637f,
        1.000000f,  0.815686f,  0.647059f,  -0.133918f, 0.144556f,  1.000000f,  0.988235f,  0.988235f,  -0.140175f, 0.163329f,  1.000000f,  0.988235f,  0.988235f,  0.095119f,  0.163329f,  0.976471f,
        0.937255f,  0.937255f,  0.131414f,  0.180851f,  0.976471f,  0.937255f,  0.937255f,  0.110138f,  0.183354f,  0.976471f,  0.937255f,  0.937255f,  -0.239049f, 0.139549f,  1.000000f,  0.819608f,
        0.647059f,  -0.197747f, 0.192115f,  1.000000f,  0.819608f,  0.647059f,  -0.259074f, 0.194618f,  1.000000f,  0.819608f,  0.647059f,  0.042553f,  0.173342f,  0.949020f,  0.949020f,  0.949020f,
        0.095119f,  0.163329f,  0.949020f,  0.949020f,  0.949020f,  -0.284105f, 0.152065f,  0.972549f,  0.764706f,  0.627451f,  -0.239049f, 0.139549f,  0.972549f,  0.764706f,  0.627451f,  -0.259074f,
        0.194618f,  0.972549f,  0.764706f,  0.627451f,  -0.239049f, 0.139549f,  1.000000f,  0.878431f,  0.741176f,  -0.190238f, 0.150814f,  1.000000f,  0.878431f,  0.741176f,  -0.197747f, 0.192115f,
        1.000000f,  0.878431f,  0.741176f,  -0.027535f, 0.182103f,  0.996078f,  0.823529f,  0.674510f,  0.010012f,  0.132040f,  0.996078f,  0.823529f,  0.674510f,  0.029873f,  0.173342f,  0.996078f,
        0.823529f,  0.674510f,  -0.022528f, 0.128285f,  0.878431f,  0.294118f,  0.105882f,  0.010012f,  0.132040f,  0.878431f,  0.294118f,  0.105882f,  -0.027535f, 0.182103f,  0.878431f,  0.294118f,
        0.105882f,  -0.056321f, 0.125782f,  1.000000f,  0.862745f,  0.729412f,  -0.027535f, 0.182103f,  1.000000f,  0.862745f,  0.729412f,  -0.082603f, 0.165668f,  1.000000f,  0.862745f,  0.729412f,
        -0.133918f, 0.144556f,  1.000000f,  0.988235f,  0.988235f,  -0.140175f, 0.163329f,  1.000000f,  0.988235f,  0.988235f,  -0.056321f, 0.125782f,  1.000000f,  0.529412f,  0.184314f,  -0.022528f,
        0.128285f,  1.000000f,  0.529412f,  0.184314f,  -0.027535f, 0.182103f,  1.000000f,  0.529412f,  0.184314f,  0.029873f,  0.173342f,  0.996078f,  0.803922f,  0.650980f,  0.036295f,  0.122028f,
        0.996078f,  0.803922f,  0.650980f,  0.042553f,  0.173342f,  0.996078f,  0.803922f,  0.650980f,  0.010012f,  0.132040f,  0.996078f,  0.807843f,  0.654902f,  0.036295f,  0.122028f,  0.996078f,
        0.807843f,  0.654902f,  0.029873f,  0.173342f,  0.996078f,  0.807843f,  0.654902f,  0.117647f,  0.115770f,  0.976471f,  0.721569f,  0.556863f,  0.131414f,  0.180851f,  0.976471f,  0.721569f,
        0.556863f,  0.095119f,  0.163329f,  0.976471f,  0.721569f,  0.556863f,  -0.080100f, 0.112015f,  1.000000f,  0.874510f,  0.741176f,  -0.056321f, 0.125782f,  1.000000f,  0.874510f,  0.741176f,
        -0.082603f, 0.165668f,  1.000000f,  0.874510f,  0.741176f,  -0.092698f, 0.163329f,  1.000000f,  0.882353f,  0.752941f,  -0.080100f, 0.112015f,  1.000000f,  0.882353f,  0.752941f,  -0.082603f,
        0.165668f,  1.000000f,  0.882353f,  0.752941f,  0.036295f,  0.122028f,  0.996078f,  0.788235f,  0.635294f,  0.095119f,  0.163329f,  0.996078f,  0.788235f,  0.635294f,  0.042553f,  0.173342f,
        0.996078f,  0.788235f,  0.635294f,  0.143930f,  0.187109f,  0.952941f,  0.709804f,  0.568627f,  0.178974f,  0.104506f,  0.952941f,  0.709804f,  0.568627f,  0.201502f,  0.172090f,  0.952941f,
        0.709804f,  0.568627f,  -0.133918f, 0.144556f,  1.000000f,  0.894118f,  0.764706f,  -0.080100f, 0.112015f,  1.000000f,  0.894118f,  0.764706f,  -0.092698f, 0.163329f,  1.000000f,  0.894118f,
        0.764706f,  0.131414f,  0.180851f,  0.968627f,  0.721569f,  0.572549f,  0.178974f,  0.104506f,  0.968627f,  0.721569f,  0.572549f,  0.143930f,  0.187109f,  0.968627f,  0.721569f,  0.572549f,
        0.117647f,  0.115770f,  0.984314f,  0.752941f,  0.596078f,  0.178974f,  0.104506f,  0.984314f,  0.752941f,  0.596078f,  0.131414f,  0.180851f,  0.984314f,  0.752941f,  0.596078f,  -0.178892f,
        0.152065f,  1.000000f,  0.909804f,  0.788235f,  -0.147685f, 0.096996f,  1.000000f,  0.909804f,  0.788235f,  -0.133918f, 0.144556f,  1.000000f,  0.909804f,  0.788235f,  -0.056321f, 0.125782f,
        0.984314f,  0.792157f,  0.647059f,  -0.026283f, 0.096996f,  0.984314f,  0.792157f,  0.647059f,  -0.022528f, 0.128285f,  0.984314f,  0.792157f,  0.647059f,  0.036295f,  0.122028f,  0.988235f,
        0.745098f,  0.576471f,  0.117647f,  0.115770f,  0.988235f,  0.745098f,  0.576471f,  0.095119f,  0.163329f,  0.988235f,  0.745098f,  0.576471f,  -0.026283f, 0.096996f,  0.960784f,  0.725490f,
        0.580392f,  0.010012f,  0.132040f,  0.960784f,  0.725490f,  0.580392f,  -0.022528f, 0.128285f,  0.960784f,  0.725490f,  0.580392f,  -0.219024f, 0.081977f,  1.000000f,  0.858824f,  0.713725f,
        -0.190238f, 0.150814f,  1.000000f,  0.858824f,  0.713725f,  -0.239049f, 0.139549f,  1.000000f,  0.858824f,  0.713725f,  -0.147685f, 0.096996f,  1.000000f,  0.894118f,  0.764706f,  -0.190238f,
        0.150814f,  1.000000f,  0.909804f,  0.792157f,  -0.147685f, 0.096996f,  1.000000f,  0.909804f,  0.792157f,  -0.178892f, 0.152065f,  1.000000f,  0.909804f,  0.792157f,  0.262829f,  0.083229f,
        0.984314f,  0.733333f,  0.564706f,  0.326659f,  0.108260f,  0.984314f,  0.733333f,  0.564706f,  0.259074f,  0.143304f,  0.984314f,  0.733333f,  0.564706f,  0.192741f,  0.096996f,  0.996078f,
        0.874510f,  0.745098f,  0.262829f,  0.083229f,  0.996078f,  0.874510f,  0.745098f,  0.259074f,  0.143304f,  0.996078f,  0.874510f,  0.745098f,  -0.080100f, 0.112015f,  0.992157f,  0.827451f,
        0.682353f,  -0.026283f, 0.096996f,  0.992157f,  0.827451f,  0.682353f,  -0.056321f, 0.125782f,  0.992157f,  0.827451f,  0.682353f,  -0.219024f, 0.081977f,  1.000000f,  0.894118f,  0.764706f,
        -0.190238f, 0.150814f,  1.000000f,  0.894118f,  0.764706f,  -0.080100f, 0.112015f,  0.603922f,  0.368627f,  0.290196f,  -0.027535f, 0.079474f,  0.603922f,  0.368627f,  0.290196f,  -0.026283f,
        0.096996f,  0.603922f,  0.368627f,  0.290196f,  -0.026283f, 0.096996f,  0.984314f,  0.776471f,  0.623529f,  0.036295f,  0.122028f,  0.984314f,  0.776471f,  0.623529f,  0.010012f,  0.132040f,
        0.984314f,  0.776471f,  0.623529f,  0.262829f,  0.083229f,  0.996078f,  0.819608f,  0.678431f,  0.314143f,  0.050688f,  0.996078f,  0.819608f,  0.678431f,  0.326659f,  0.108260f,  0.996078f,
        0.819608f,  0.678431f,  -0.027535f, 0.079474f,  0.725490f,  0.498039f,  0.392157f,  0.036295f,  0.122028f,  0.725490f,  0.498039f,  0.392157f,  -0.026283f, 0.096996f,  0.725490f,  0.498039f,
        0.392157f,  0.036295f,  0.122028f,  0.988235f,  0.780392f,  0.623529f,  0.107635f,  0.045682f,  0.988235f,  0.780392f,  0.623529f,  0.117647f,  0.115770f,  0.988235f,  0.780392f,  0.623529f,
        0.197747f,  0.041927f,  1.000000f,  0.866667f,  0.729412f,  0.262829f,  0.083229f,  1.000000f,  0.866667f,  0.729412f,  0.192741f,  0.096996f,  1.000000f,  0.866667f,  0.729412f,  0.107635f,
        0.045682f,  0.984314f,  0.768627f,  0.615686f,  0.178974f,  0.104506f,  0.984314f,  0.768627f,  0.615686f,  0.117647f,  0.115770f,  0.984314f,  0.768627f,  0.615686f,  0.274093f,  0.021902f,
        1.000000f,  0.878431f,  0.737255f,  0.314143f,  0.050688f,  1.000000f,  0.878431f,  0.737255f,  0.262829f,  0.083229f,  1.000000f,  0.878431f,  0.737255f,  -0.132666f, 0.028160f,  1.000000f,
        0.819608f,  0.662745f,  -0.080100f, 0.112015f,  1.000000f,  0.819608f,  0.662745f,  -0.147685f, 0.096996f,  1.000000f,  0.819608f,  0.662745f,  0.197747f,  0.041927f,  0.996078f,  0.807843f,
        0.650980f,  0.274093f,  0.021902f,  0.996078f,  0.807843f,  0.650980f,  0.262829f,  0.083229f,  0.996078f,  0.807843f,  0.650980f,  -0.219024f, 0.081977f,  0.996078f,  0.800000f,  0.635294f,
        -0.132666f, 0.028160f,  0.996078f,  0.800000f,  0.635294f,  -0.147685f, 0.096996f,  0.996078f,  0.800000f,  0.635294f,  -0.132666f, 0.028160f,  0.996078f,  0.800000f,  0.643137f,  -0.027535f,
        0.079474f,  0.996078f,  0.800000f,  0.643137f,  -0.080100f, 0.112015f,  0.996078f,  0.800000f,  0.643137f,  -0.022528f, 0.018148f,  0.992157f,  0.776471f,  0.619608f,  0.036295f,  0.122028f,
        0.992157f,  0.776471f,  0.619608f,  -0.027535f, 0.079474f,  0.992157f,  0.776471f,  0.619608f,  -0.132666f, 0.028160f,  0.984314f,  0.764706f,  0.607843f,  -0.022528f, 0.018148f,  0.984314f,
        0.764706f,  0.607843f,  -0.027535f, 0.079474f,  0.984314f,  0.764706f,  0.607843f,  0.206508f,  -0.004380f, 0.933333f,  0.666667f,  0.517647f,  0.274093f,  0.021902f,  0.933333f,  0.666667f,
        0.517647f,  0.197747f,  0.041927f,  0.933333f,  0.666667f,  0.517647f,  0.217772f,  -0.011890f, 0.921569f,  0.658824f,  0.509804f,  0.274093f,  0.021902f,  0.921569f,  0.658824f,  0.509804f,
        0.206508f,  -0.004380f, 0.921569f,  0.658824f,  0.509804f,  -0.022528f, 0.018148f,  0.988235f,  0.788235f,  0.635294f,  0.107635f,  0.045682f,  0.988235f,  0.788235f,  0.635294f,  0.036295f,
        0.122028f,  0.988235f,  0.788235f,  0.635294f,  -0.022528f, 0.018148f,  0.564706f,  0.098039f,  0.098039f,  0.046308f,  -0.019399f, 0.564706f,  0.098039f,  0.098039f,  0.107635f,  0.045682f,
        0.564706f,  0.098039f,  0.098039f,  -0.132666f, 0.028160f,  0.580392f,  0.101961f,  0.101961f,  -0.040050f, -0.019399f, 0.580392f,  0.101961f,  0.101961f,  -0.022528f, 0.018148f,  0.580392f,
        0.101961f,  0.101961f,  0.107635f,  0.045682f,  0.631373f,  0.109804f,  0.105882f,  0.206508f,  -0.004380f, 0.631373f,  0.109804f,  0.105882f,  0.197747f,  0.041927f,  0.631373f,  0.109804f,
        0.105882f,  -0.245307f, -0.009387f, 0.960784f,  0.243137f,  0.180392f,  -0.153943f, -0.036921f, 0.960784f,  0.243137f,  0.180392f,  -0.132666f, 0.028160f,  0.960784f,  0.243137f,  0.180392f,
        0.250313f,  -0.051940f, 0.996078f,  0.811765f,  0.654902f,  0.274093f,  0.021902f,  0.996078f,  0.811765f,  0.654902f,  0.217772f,  -0.011890f, 0.996078f,  0.811765f,  0.654902f,  0.187735f,
        -0.050688f, 0.611765f,  0.364706f,  0.247059f,  0.217772f,  -0.011890f, 0.611765f,  0.364706f,  0.247059f,  0.206508f,  -0.004380f, 0.611765f,  0.364706f,  0.247059f,  -0.100125f, -0.056946f,
        0.850980f,  0.184314f,  0.184314f,  -0.040050f, -0.019399f, 0.850980f,  0.184314f,  0.184314f,  -0.132666f, 0.028160f,  0.850980f,  0.184314f,  0.184314f,  0.126408f,  -0.055695f, 0.682353f,
        0.129412f,  0.129412f,  0.206508f,  -0.004380f, 0.682353f,  0.129412f,  0.129412f,  0.107635f,  0.045682f,  0.682353f,  0.129412f,  0.129412f,  -0.153943f, -0.036921f, 0.835294f,  0.192157f,
        0.184314f,  -0.100125f, -0.056946f, 0.835294f,  0.192157f,  0.184314f,  -0.132666f, 0.028160f,  0.835294f,  0.192157f,  0.184314f,  -0.040050f, -0.019399f, 0.596078f,  0.105882f,  0.105882f,
        0.046308f,  -0.019399f, 0.596078f,  0.105882f,  0.105882f,  -0.022528f, 0.018148f,  0.596078f,  0.105882f,  0.105882f,  -0.100125f, -0.056946f, 0.325490f,  0.788235f,  0.913725f,  -0.077597f,
        -0.060701f, 0.325490f,  0.788235f,  0.913725f,  -0.040050f, -0.019399f, 0.325490f,  0.788235f,  0.913725f,  0.046308f,  -0.019399f, 0.670588f,  0.129412f,  0.129412f,  0.126408f,  -0.055695f,
        0.670588f,  0.129412f,  0.129412f,  0.107635f,  0.045682f,  0.670588f,  0.129412f,  0.129412f,  0.126408f,  -0.055695f, 0.882353f,  0.168627f,  0.168627f,  0.187735f,  -0.050688f, 0.882353f,
        0.168627f,  0.168627f,  0.206508f,  -0.004380f, 0.882353f,  0.168627f,  0.168627f,  0.187735f,  -0.050688f, 0.933333f,  0.666667f,  0.517647f,  0.217772f,  -0.061952f, 0.933333f,  0.666667f,
        0.517647f,  0.217772f,  -0.011890f, 0.933333f,  0.666667f,  0.517647f,  0.217772f,  -0.061952f, 0.992157f,  0.792157f,  0.631373f,  0.250313f,  -0.051940f, 0.992157f,  0.792157f,  0.631373f,
        0.217772f,  -0.011890f, 0.992157f,  0.792157f,  0.631373f,  -0.077597f, -0.060701f, 0.454902f,  0.796078f,  0.929412f,  -0.042553f, -0.065707f, 0.454902f,  0.796078f,  0.929412f,  -0.040050f,
        -0.019399f, 0.454902f,  0.796078f,  0.929412f,  -0.244055f, -0.058198f, 0.988235f,  0.192157f,  0.188235f,  -0.153943f, -0.036921f, 0.988235f,  0.192157f,  0.188235f,  -0.245307f, -0.009387f,
        0.988235f,  0.192157f,  0.188235f,  -0.252816f, -0.076971f, 0.992157f,  0.862745f,  0.737255f,  -0.179405f, -0.076971f, 0.992157f,  0.862745f,  0.737255f,  -0.244055f, -0.058198f, 0.992157f,
        0.862745f,  0.737255f,  -0.230288f, -0.076971f, 0.996078f,  0.196078f,  0.192157f,  -0.153943f, -0.036921f, 0.996078f,  0.196078f,  0.192157f,  -0.244055f, -0.058198f, 0.996078f,  0.196078f,
        0.192157f,  -0.001252f, -0.091990f, 0.956863f,  0.184314f,  0.184314f,  -0.040050f, -0.019399f, 0.956863f,  0.184314f,  0.184314f,  -0.042553f, -0.065707f, 0.956863f,  0.184314f,  0.184314f,
        -0.001252f, -0.091990f, 0.894118f,  0.168627f,  0.168627f,  0.046308f,  -0.019399f, 0.894118f,  0.168627f,  0.168627f,  -0.040050f, -0.019399f, 0.894118f,  0.168627f,  0.168627f,  -0.146433f,
        -0.095745f, 0.988235f,  0.192157f,  0.188235f,  -0.100125f, -0.056946f, 0.988235f,  0.192157f,  0.188235f,  -0.102628f, -0.096996f, 0.988235f,  0.239216f,  0.239216f,  -0.077597f, -0.060701f,
        0.988235f,  0.239216f,  0.239216f,  -0.100125f, -0.056946f, 0.988235f,  0.239216f,  0.239216f,  0.180225f,  -0.094493f, 0.670588f,  0.113725f,  0.109804f,  0.217772f,  -0.061952f, 0.670588f,
        0.113725f,  0.109804f,  0.187735f,  -0.050688f, 0.670588f,  0.113725f,  0.109804f,  0.126408f,  -0.055695f, 0.756863f,  0.137255f,  0.137255f,  0.180225f,  -0.094493f, 0.756863f,  0.137255f,
        0.137255f,  0.187735f,  -0.050688f, 0.756863f,  0.137255f,  0.137255f,  -0.146433f, -0.095745f, 0.992157f,  0.160784f,  0.180392f,  -0.102628f, -0.096996f, 0.992157f,  0.160784f,  0.180392f,
        -0.100125f, -0.056946f, 0.992157f,  0.160784f,  0.180392f,  -0.230288f, -0.076971f, 0.733333f,  0.117647f,  0.117647f,  -0.146433f, -0.095745f, 0.733333f,  0.117647f,  0.117647f,  -0.153943f,
        -0.036921f, 0.733333f,  0.117647f,  0.117647f,  -0.230288f, -0.076971f, 0.635294f,  0.086275f,  0.086275f,  -0.178974f, -0.123279f, 0.635294f,  0.086275f,  0.086275f,  -0.146433f, -0.095745f,
        0.635294f,  0.086275f,  0.086275f,  -0.102628f, -0.096996f, 0.470588f,  0.929412f,  0.960784f,  -0.042553f, -0.065707f, 0.470588f,  0.929412f,  0.960784f,  -0.077597f, -0.060701f, 0.470588f,
        0.929412f,  0.960784f,  -0.071339f, -0.139549f, 0.325490f,  0.858824f,  0.992157f,  -0.042553f, -0.065707f, 0.325490f,  0.858824f,  0.992157f,  -0.102628f, -0.096996f, 0.325490f,  0.858824f,
        0.992157f,  -0.146433f, -0.095745f, 0.996078f,  0.223529f,  0.223529f,  -0.120150f, -0.140801f, 0.996078f,  0.223529f,  0.223529f,  -0.102628f, -0.096996f, 0.996078f,  0.223529f,  0.223529f,
        0.046308f,  -0.019399f, 0.792157f,  0.149020f,  0.149020f,  0.092616f,  -0.137046f, 0.792157f,  0.149020f,  0.149020f,  0.126408f,  -0.055695f, 0.792157f,  0.149020f,  0.149020f,  -0.001252f,
        -0.091990f, 0.882353f,  0.168627f,  0.168627f,  0.092616f,  -0.137046f, 0.882353f,  0.168627f,  0.168627f,  0.046308f,  -0.019399f, 0.882353f,  0.168627f,  0.168627f,  -0.161452f, -0.129537f,
        0.996078f,  0.207843f,  0.207843f,  -0.120150f, -0.140801f, 0.996078f,  0.207843f,  0.207843f,  -0.146433f, -0.095745f, 0.996078f,  0.207843f,  0.207843f,  -0.071339f, -0.139549f, 0.984314f,
        0.188235f,  0.188235f,  -0.001252f, -0.091990f, 0.984314f,  0.188235f,  0.188235f,  -0.042553f, -0.065707f, 0.984314f,  0.188235f,  0.188235f,  0.092616f,  -0.137046f, 0.796078f,  0.149020f,
        0.149020f,  0.158949f,  -0.143304f, 0.796078f,  0.149020f,  0.149020f,  0.126408f,  -0.055695f, 0.796078f,  0.149020f,  0.149020f,  -0.120150f, -0.140801f, 0.486275f,  0.862745f,  0.996078f,
        -0.071339f, -0.139549f, 0.486275f,  0.862745f,  0.996078f,  -0.102628f, -0.096996f, 0.486275f,  0.862745f,  0.996078f,  -0.222779f, -0.160826f, 0.933333f,  0.682353f,  0.552941f,  -0.178974f,
        -0.123279f, 0.933333f,  0.682353f,  0.552941f,  -0.230288f, -0.076971f, 0.933333f,  0.682353f,  0.552941f,  -0.252816f, -0.076971f, 0.996078f,  0.901961f,  0.780392f,  -0.222779f, -0.160826f,
        0.996078f,  0.901961f,  0.780392f,  -0.230288f, -0.076971f, 0.996078f,  0.901961f,  0.780392f,  -0.222779f, -0.160826f, 0.901961f,  0.623529f,  0.501961f,  -0.176471f, -0.160826f, 0.901961f,
        0.623529f,  0.501961f,  -0.178974f, -0.123279f, 0.901961f,  0.623529f,  0.501961f,  0.025031f,  -0.169587f, 0.913725f,  0.176471f,  0.215686f,  0.092616f,  -0.137046f, 0.913725f,  0.176471f,
        0.215686f,  -0.001252f, -0.091990f, 0.913725f,  0.176471f,  0.215686f,  -0.176471f, -0.160826f, 0.996078f,  0.203922f,  0.203922f,  -0.120150f, -0.140801f, 0.996078f,  0.203922f,  0.203922f,
        -0.161452f, -0.129537f, 0.996078f,  0.203922f,  0.203922f,  -0.071339f, -0.139549f, 0.984314f,  0.192157f,  0.149020f,  0.025031f,  -0.169587f, 0.984314f,  0.192157f,  0.149020f,  -0.001252f,
        -0.091990f, 0.984314f,  0.192157f,  0.149020f,  -0.120150f, -0.140801f, 0.996078f,  0.203922f,  0.203922f,  -0.082603f, -0.198373f, 0.996078f,  0.203922f,  0.203922f,  -0.071339f, -0.139549f,
        0.996078f,  0.203922f,  0.203922f,  -0.202754f, -0.209637f, 0.878431f,  0.549020f,  0.435294f,  -0.176471f, -0.160826f, 0.878431f,  0.549020f,  0.435294f,  -0.222779f, -0.160826f, 0.878431f,
        0.549020f,  0.435294f,  0.092616f,  -0.137046f, 0.850980f,  0.164706f,  0.164706f,  0.131414f,  -0.215895f, 0.850980f,  0.164706f,  0.164706f,  0.158949f,  -0.143304f, 0.850980f,  0.164706f,
        0.164706f,  0.060075f,  -0.223404f, 0.933333f,  0.180392f,  0.180392f,  0.092616f,  -0.137046f, 0.933333f,  0.180392f,  0.180392f,  0.025031f,  -0.169587f, 0.933333f,  0.180392f,  0.180392f,
        -0.267835f, -0.199625f, 0.964706f,  0.760784f,  0.627451f,  -0.202754f, -0.209637f, 0.964706f,  0.760784f,  0.627451f,  -0.222779f, -0.160826f, 0.964706f,  0.760784f,  0.627451f,  0.131414f,
        -0.215895f, 0.870588f,  0.164706f,  0.164706f,  0.196496f,  -0.223404f, 0.870588f,  0.164706f,  0.164706f,  0.158949f,  -0.143304f, 0.870588f,  0.164706f,  0.164706f,  -0.082603f, -0.198373f,
        0.988235f,  0.192157f,  0.192157f,  0.025031f,  -0.169587f, 0.988235f,  0.192157f,  0.192157f,  -0.071339f, -0.139549f, 0.988235f,  0.192157f,  0.192157f,  0.060075f,  -0.223404f, 1.000000f,
        0.145098f,  0.172549f,  0.131414f,  -0.215895f, 1.000000f,  0.145098f,  0.172549f,  0.092616f,  -0.137046f, 1.000000f,  0.145098f,  0.172549f,  -0.082603f, -0.198373f, 0.984314f,  0.188235f,
        0.188235f,  -0.015019f, -0.233417f, 0.984314f,  0.188235f,  0.188235f,  0.025031f,  -0.169587f, 0.984314f,  0.188235f,  0.188235f,  -0.136421f, -0.235920f, 0.996078f,  0.227451f,  0.235294f,
        -0.120150f, -0.140801f, 0.996078f,  0.227451f,  0.235294f,  -0.176471f, -0.160826f, 0.996078f,  0.227451f,  0.235294f,  -0.136421f, -0.235920f, 0.996078f,  0.203922f,  0.149020f,  -0.082603f,
        -0.198373f, 0.996078f,  0.203922f,  0.149020f,  -0.120150f, -0.140801f, 0.996078f,  0.203922f,  0.149020f,  -0.239049f, -0.242178f, 0.964706f,  0.807843f,  0.678431f,  -0.202754f, -0.209637f,
        0.964706f,  0.807843f,  0.678431f,  -0.267835f, -0.199625f, 0.964706f,  0.807843f,  0.678431f,  -0.202754f, -0.209637f, 0.988235f,  0.200000f,  0.200000f,  -0.136421f, -0.235920f, 0.988235f,
        0.200000f,  0.200000f,  -0.176471f, -0.160826f, 0.988235f,  0.200000f,  0.200000f,  -0.239049f, -0.242178f, 0.929412f,  0.662745f,  0.521569f,  -0.209012f, -0.247184f, 0.929412f,  0.662745f,
        0.521569f,  -0.202754f, -0.209637f, 0.929412f,  0.662745f,  0.521569f,  -0.077597f, -0.238423f, 1.000000f,  0.200000f,  0.200000f,  -0.015019f, -0.233417f, 1.000000f,  0.200000f,  0.200000f,
        -0.082603f, -0.198373f, 1.000000f,  0.200000f,  0.200000f,  -0.015019f, -0.233417f, 0.949020f,  0.180392f,  0.180392f,  0.060075f,  -0.223404f, 0.949020f,  0.180392f,  0.180392f,  0.025031f,
        -0.169587f, 0.949020f,  0.180392f,  0.180392f,  -0.136421f, -0.235920f, 1.000000f,  0.219608f,  0.219608f,  -0.077597f, -0.238423f, 1.000000f,  0.219608f,  0.219608f,  -0.082603f, -0.198373f,
        1.000000f,  0.219608f,  0.219608f,  0.060075f,  -0.223404f, 0.270588f,  0.258824f,  0.254902f,  0.128911f,  -0.250939f, 0.270588f,  0.258824f,  0.254902f,  0.131414f,  -0.215895f, 0.270588f,
        0.258824f,  0.254902f,  -0.209012f, -0.247184f, 0.250980f,  0.254902f,  0.235294f,  -0.136421f, -0.235920f, 0.250980f,  0.254902f,  0.235294f,  -0.202754f, -0.209637f, 0.250980f,  0.254902f,
        0.235294f,  0.128911f,  -0.250939f, 0.572549f,  0.082353f,  0.082353f,  0.196496f,  -0.223404f, 0.572549f,  0.082353f,  0.082353f,  0.131414f,  -0.215895f, 0.572549f,  0.082353f,  0.082353f,
        -0.209012f, -0.247184f, 0.321569f,  0.313725f,  0.305882f,  -0.158949f, -0.287234f, 0.321569f,  0.313725f,  0.305882f,  -0.136421f, -0.235920f, 0.321569f,  0.313725f,  0.305882f,  -0.077597f,
        -0.238423f, 0.176471f,  0.168627f,  0.168627f,  -0.016271f, -0.275970f, 0.176471f,  0.168627f,  0.168627f,  -0.015019f, -0.233417f, 0.176471f,  0.168627f,  0.168627f,  -0.016271f, -0.275970f,
        0.215686f,  0.211765f,  0.200000f,  0.060075f,  -0.223404f, 0.215686f,  0.211765f,  0.200000f,  -0.015019f, -0.233417f, 0.215686f,  0.211765f,  0.200000f,  0.060075f,  -0.297247f, 0.274510f,
        0.270588f,  0.258824f,  0.128911f,  -0.250939f, 0.274510f,  0.270588f,  0.258824f,  0.060075f,  -0.223404f, 0.274510f,  0.270588f,  0.258824f,  -0.016271f, -0.275970f, 0.317647f,  0.317647f,
        0.305882f,  0.060075f,  -0.297247f, 0.317647f,  0.317647f,  0.305882f,  0.060075f,  -0.223404f, 0.317647f,  0.317647f,  0.305882f,  -0.158949f, -0.287234f, 0.309804f,  0.305882f,  0.294118f,
        -0.118899f, -0.311014f, 0.309804f,  0.305882f,  0.294118f,  -0.136421f, -0.235920f, 0.309804f,  0.305882f,  0.294118f,  -0.118899f, -0.311014f, 0.207843f,  0.200000f,  0.192157f,  -0.077597f,
        -0.238423f, 0.207843f,  0.200000f,  0.192157f,  -0.136421f, -0.235920f, 0.207843f,  0.200000f,  0.192157f,  -0.063830f, -0.328536f, 0.200000f,  0.184314f,  0.180392f,  -0.016271f, -0.275970f,
        0.200000f,  0.184314f,  0.180392f,  -0.077597f, -0.238423f, 0.200000f,  0.184314f,  0.180392f,  -0.118899f, -0.311014f, 0.231373f,  0.219608f,  0.215686f,  -0.063830f, -0.328536f, 0.231373f,
        0.219608f,  0.215686f,  -0.077597f, -0.238423f, 0.231373f,  0.219608f,  0.215686f,  0.060075f,  -0.297247f, 0.317647f,  0.313725f,  0.305882f,  0.131414f,  -0.341051f, 0.317647f,  0.313725f,
        0.305882f,  0.128911f,  -0.250939f, 0.317647f,  0.313725f,  0.305882f,  -0.158949f, -0.287234f, 0.894118f,  0.623529f,  0.494118f,  -0.142679f, -0.346058f, 0.894118f,  0.623529f,  0.494118f,
        -0.118899f, -0.311014f, 0.894118f,  0.623529f,  0.494118f,  -0.187735f, -0.317272f, 0.980392f,  0.827451f,  0.694118f,  -0.142679f, -0.346058f, 0.980392f,  0.827451f,  0.694118f,  -0.158949f,
        -0.287234f, 0.980392f,  0.827451f,  0.694118f,  -0.018774f, -0.337297f, 0.301961f,  0.301961f,  0.290196f,  0.060075f,  -0.297247f, 0.301961f,  0.301961f,  0.290196f,  -0.016271f, -0.275970f,
        0.301961f,  0.301961f,  0.290196f,  0.005006f,  -0.352315f, 0.345098f,  0.341176f,  0.329412f,  0.060075f,  -0.297247f, 0.345098f,  0.341176f,  0.329412f,  -0.018774f, -0.337297f, 0.345098f,
        0.341176f,  0.329412f,  0.005006f,  -0.352315f, 0.349020f,  0.349020f,  0.333333f,  0.062578f,  -0.357322f, 0.349020f,  0.349020f,  0.333333f,  0.060075f,  -0.297247f, 0.349020f,  0.349020f,
        0.333333f,  -0.326659f, -0.349812f, 0.905882f,  0.890196f,  0.792157f,  -0.290363f, -0.357322f, 0.905882f,  0.890196f,  0.792157f,  -0.309137f, -0.329787f, 0.905882f,  0.890196f,  0.792157f,
        0.062578f,  -0.357322f, 0.298039f,  0.298039f,  0.290196f,  0.131414f,  -0.341051f, 0.298039f,  0.298039f,  0.290196f,  0.060075f,  -0.297247f, 0.298039f,  0.298039f,  0.290196f,  -0.290363f,
        -0.357322f, 0.337255f,  0.431373f,  0.996078f,  -0.205257f, -0.337297f, 0.337255f,  0.431373f,  0.996078f,  -0.309137f, -0.329787f, 0.337255f,  0.431373f,  0.996078f,  -0.187735f, -0.317272f,
        0.321569f,  0.639216f,  0.392157f,  -0.162704f, -0.371089f, 0.321569f,  0.639216f,  0.392157f,  -0.142679f, -0.346058f, 0.321569f,  0.639216f,  0.392157f,  -0.205257f, -0.337297f, 0.337255f,
        0.670588f,  0.407843f,  -0.162704f, -0.371089f, 0.337255f,  0.670588f,  0.407843f,  -0.187735f, -0.317272f, 0.337255f,  0.670588f,  0.407843f,  -0.255319f, -0.381101f, 0.309804f,  0.396078f,
        0.917647f,  -0.205257f, -0.337297f, 0.309804f,  0.396078f,  0.917647f,  -0.290363f, -0.357322f, 0.309804f,  0.396078f,  0.917647f,  -0.326659f, -0.349812f, 0.917647f,  0.909804f,  0.807843f,
        -0.302879f, -0.383605f, 0.917647f,  0.909804f,  0.807843f,  -0.290363f, -0.357322f, 0.917647f,  0.909804f,  0.807843f,  0.005006f,  -0.352315f, 0.882353f,  0.611765f,  0.474510f,  0.057572f,
        -0.383605f, 0.882353f,  0.611765f,  0.474510f,  0.062578f,  -0.357322f, 0.882353f,  0.611765f,  0.474510f,  -0.302879f, -0.383605f, 0.827451f,  0.823529f,  0.729412f,  -0.255319f, -0.381101f,
        0.827451f,  0.823529f,  0.729412f,  -0.290363f, -0.357322f, 0.827451f,  0.823529f,  0.729412f,  -0.255319f, -0.381101f, 0.286275f,  0.368627f,  0.862745f,  -0.215269f, -0.402378f, 0.286275f,
        0.368627f,  0.862745f,  -0.205257f, -0.337297f, 0.286275f,  0.368627f,  0.862745f,  -0.002503f, -0.382353f, 0.984314f,  0.843137f,  0.717647f,  0.057572f,  -0.383605f, 0.984314f,  0.843137f,
        0.717647f,  0.005006f,  -0.352315f, 0.984314f,  0.843137f,  0.717647f,  -0.215269f, -0.402378f, 0.309804f,  0.368627f,  0.780392f,  -0.162704f, -0.371089f, 0.309804f,  0.368627f,  0.780392f,
        -0.205257f, -0.337297f, 0.309804f,  0.368627f,  0.780392f,  -0.002503f, -0.382353f, 0.298039f,  0.576471f,  0.352941f,  0.052566f,  -0.407384f, 0.298039f,  0.576471f,  0.352941f,  0.057572f,
        -0.383605f, 0.298039f,  0.576471f,  0.352941f,  -0.215269f, -0.402378f, 0.352941f,  0.443137f,  0.964706f,  -0.168961f, -0.419900f, 0.352941f,  0.443137f,  0.964706f,  -0.162704f, -0.371089f,
        0.352941f,  0.443137f,  0.964706f,  -0.000000f, -0.412390f, 0.356863f,  0.705882f,  0.435294f,  0.052566f,  -0.407384f, 0.356863f,  0.705882f,  0.435294f,  -0.002503f, -0.382353f, 0.356863f,
        0.705882f,  0.435294f,  -0.255319f, -0.381101f, 0.611765f,  0.623529f,  0.654902f,  -0.227785f, -0.423655f, 0.611765f,  0.623529f,  0.654902f,  -0.215269f, -0.402378f, 0.611765f,  0.623529f,
        0.654902f,  -0.215269f, -0.402378f, 0.866667f,  0.858824f,  0.764706f,  -0.182729f, -0.443680f, 0.866667f,  0.858824f,  0.764706f,  -0.168961f, -0.419900f, 0.866667f,  0.858824f,  0.764706f,
        -0.000000f, -0.412390f, 0.450980f,  0.529412f,  0.937255f,  0.038798f,  -0.448686f, 0.450980f,  0.529412f,  0.937255f,  0.052566f,  -0.407384f, 0.450980f,  0.529412f,  0.937255f,  -0.227785f,
        -0.423655f, 0.815686f,  0.807843f,  0.721569f,  -0.182729f, -0.443680f, 0.815686f,  0.807843f,  0.721569f,  -0.215269f, -0.402378f, 0.815686f,  0.807843f,  0.721569f,  -0.302879f, -0.383605f,
        0.752941f,  0.749020f,  0.666667f,  -0.227785f, -0.423655f, 0.752941f,  0.749020f,  0.666667f,  -0.255319f, -0.381101f, 0.752941f,  0.749020f,  0.666667f,  0.068836f,  -0.474969f, 0.345098f,
        0.431373f,  0.964706f,  0.052566f,  -0.407384f, 0.345098f,  0.431373f,  0.964706f,  0.038798f,  -0.448686f, 0.345098f,  0.431373f,  0.964706f,  0.068836f,  -0.474969f, 0.325490f,  0.415686f,
        0.960784f,  0.108886f,  -0.469962f, 0.325490f,  0.415686f,  0.960784f,  0.052566f,  -0.407384f, 0.325490f,  0.415686f,  0.960784f,  -0.017522f, -0.469962f, 0.376471f,  0.478431f,  0.968627f,
        0.038798f,  -0.448686f, 0.376471f,  0.478431f,  0.968627f,  -0.000000f, -0.412390f, 0.376471f,  0.478431f,  0.968627f,  0.032541f,  -0.477472f, 0.380392f,  0.486275f,  0.980392f,  0.068836f,
        -0.474969f, 0.380392f,  0.486275f,  0.980392f,  0.038798f,  -0.448686f, 0.380392f,  0.486275f,  0.980392f,  -0.017522f, -0.469962f, 0.396078f,  0.505882f,  0.980392f,  0.032541f,  -0.477472f,
        0.396078f,  0.505882f,  0.980392f,  0.038798f,  -0.448686f, 0.396078f,  0.505882f,  0.980392f,  0.032541f,  -0.477472f, 0.898039f,  0.894118f,  0.792157f,  0.051314f,  -0.500000f, 0.898039f,
        0.894118f,  0.792157f,  0.068836f,  -0.474969f, 0.898039f,  0.894118f,  0.792157f,  -0.015019f, -0.492491f, 0.894118f,  0.886275f,  0.780392f,  0.032541f,  -0.477472f, 0.894118f,  0.886275f,
        0.780392f,  -0.017522f, -0.469962f, 0.894118f,  0.886275f,  0.780392f,  0.068836f,  -0.474969f, 0.713725f,  0.709804f,  0.658824f,  0.113892f,  -0.491239f, 0.713725f,  0.709804f,  0.658824f,
        0.108886f,  -0.469962f, 0.713725f,  0.709804f,  0.658824f,  0.051314f,  -0.500000f, 0.745098f,  0.741176f,  0.654902f,  0.113892f,  -0.491239f, 0.745098f,  0.741176f,  0.654902f,  0.068836f,
        -0.474969f, 0.745098f,  0.741176f,  0.654902f,  -0.015019f, -0.492491f, 0.949020f,  0.949020f,  0.854902f,  0.051314f,  -0.500000f, 0.949020f,  0.949020f,  0.854902f,  0.032541f,  -0.477472f,
        0.949020f,  0.949020f,  0.854902f
    };

    constexpr unsigned short indices[] = {
        0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,
        38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,
        76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
        114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
        152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
        190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
        228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        266, 267, 268, 269, 270, 271, 272, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 276, 275, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 287,
        300, 276, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 331, 334, 332,
        335, 336, 337, 287, 338, 300, 325, 339, 340, 341, 338, 287, 342, 343, 344, 331, 345, 334, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
        278, 366, 367, 368, 369, 370, 371, 372, 373, 374, 331, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 375, 331, 387, 388, 298, 389, 350, 349, 390, 391, 392, 393, 394, 395, 396,
        397, 398, 399, 400, 401, 402, 403, 320, 404, 405, 406, 407, 383, 408, 409, 410, 411, 412, 413, 414, 415, 416, 359, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431,
        399, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 407, 384, 383, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465,
        466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 459, 458, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 482, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
        539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
        577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 597, 613,
        614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
        652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
        690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
        728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
        766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
        804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
        842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
    };
    villager.vertexBufferHandle = OpenGL::CreateBuffer(OpenGL::BufferType::Vertices, std::as_bytes(std::span{ vertices }));
    villager.indexBufferHandle  = OpenGL::CreateBuffer(OpenGL::BufferType::Indices, std::as_bytes(std::span{ indices }));
    villager.indicesCount       = static_cast<GLsizei>(std::ssize(indices));
    const auto layout           = OpenGL::VertexBuffer{ villager.vertexBufferHandle, OpenGL::BufferLayout{ { OpenGL::Attribute::Float2, OpenGL::Attribute::Float3 } } };
    villager.modelHandle        = OpenGL::CreateVertexArrayObject(layout, villager.indexBufferHandle);
}

void DemoBufferTypes::updateNDCUniformValues()
{
    const auto        display_size  = currentDisplaySize;
    const Math::ivec2 viewport_size = { static_cast<int>(display_size.x), static_cast<int>(display_size.y) };
    const auto        to_ndc        = CS200::build_ndc_matrix(viewport_size);
    const auto        as_3x3        = CS200::Renderer2DUtils::to_opengl_mat3(to_ndc);
    for (std::size_t col = 0; col < 3; ++col)
    {
        const std::size_t src_offset = col * 3;
        const std::size_t dst_offset = col * 4;

        toNDC[dst_offset + 0] = as_3x3[src_offset + 0]; // how?****
        toNDC[dst_offset + 1] = as_3x3[src_offset + 1];
        toNDC[dst_offset + 2] = as_3x3[src_offset + 2];
        toNDC[dst_offset + 3] = 0.0f;
    }
}

void DemoBufferTypes::updateBackgroundModel()
{
    const auto window_size = Engine::GetWindow().GetSize();

    // Calculate grid dimensions
    const int  num_quads_wide        = window_size.x / QuadSize + 2;
    const int  num_quads_tall        = window_size.y / QuadSize + 2;
    const auto num_required_vertices = num_quads_wide * num_quads_tall * 4;

    // Create grid parameters (calculated once)
    const GridParams gridParams = { .numQuadsWide = num_quads_wide, .numQuadsTall = num_quads_tall };

    // Calculate animation parameters
    const auto animParams = calculateAnimationParameters();

    // Ensure buffers have sufficient capacity
    const bool indices_need_update = ensureBackgroundBuffersCapacity(gridParams);

    // Generate vertex data for all quads
    background.indicesCount    = num_quads_wide * num_quads_tall * 6;
    unsigned int vertex_index  = 0;
    unsigned int indices_index = 0;

    for (int row = 0; row < num_quads_tall; ++row)
    {
        for (int column = 0; column < num_quads_wide; ++column)
        {
            generateQuadVertices(row, column, gridParams, animParams);

            // Only update indices if we grew the buffer (they don't change during animation)
            if (indices_need_update)
            {
                backgroundIndices[indices_index + 0] = static_cast<unsigned short>(vertex_index + 0);
                backgroundIndices[indices_index + 1] = static_cast<unsigned short>(vertex_index + 1);
                backgroundIndices[indices_index + 2] = static_cast<unsigned short>(vertex_index + 2);
                backgroundIndices[indices_index + 3] = static_cast<unsigned short>(vertex_index + 0);
                backgroundIndices[indices_index + 4] = static_cast<unsigned short>(vertex_index + 2);
                backgroundIndices[indices_index + 5] = static_cast<unsigned short>(vertex_index + 3);
            }
            vertex_index += 4;
            indices_index += 6;
        }
    }

    // Update GPU buffers
    updateBackgroundBuffersOnGPU(num_required_vertices, indices_need_update);
}

void DemoBufferTypes::drawObject(const object& object)
{
    constexpr GLenum         primitive_pattern        = GL_TRIANGLES;
    constexpr GLenum         indices_type             = GL_UNSIGNED_SHORT;
    constexpr GLvoid*        byte_offset_into_indices = nullptr;
    constexpr OpenGL::Handle no_object                = 0;

    if (object.modelHandle == 0) [[unlikely]]
        return;

    GL::BindVertexArray(object.modelHandle);
    GL::DrawElements(primitive_pattern, object.indicesCount, indices_type, byte_offset_into_indices);

    GL::BindVertexArray(no_object);
}

DemoBufferTypes::AnimationParams DemoBufferTypes::calculateAnimationParameters()
{
    const float elapsed_time = static_cast<float>(Engine::GetWindowEnvironment().ElapsedTime);

    // Multiple sine waves with different frequencies for more complex animation
    const float wave1_t = (std::sin(elapsed_time * WaveFrequency1) + 1.0f) * 0.5f; // Primary wave
    const float wave2_t = (std::sin(elapsed_time * WaveFrequency2) + 1.0f) * 0.5f; // Faster secondary wave
    const float wave3_t = (std::sin(elapsed_time * WaveFrequency3) + 1.0f) * 0.5f; // Slower tertiary wave

    // Combine waves for more interesting motion
    const float combined_wave  = (wave1_t * WaveMix1 + wave2_t * WaveMix2 + wave3_t * WaveMix3);
    const float quad_tilt_size = -QuadSize / 4.0f * (1.0f - combined_wave) + combined_wave * QuadSize / 4.0f;

    return AnimationParams{
        .elapsedTime  = elapsed_time,
        .quadTiltSize = quad_tilt_size,
    };
}

bool DemoBufferTypes::ensureBackgroundBuffersCapacity(const GridParams& grid_params)
{
    const auto num_quads             = grid_params.numQuadsWide * grid_params.numQuadsTall;
    const auto num_required_vertices = num_quads * 4;
    const auto num_required_indices  = num_quads * 6;

    if (num_required_vertices > std::ssize(backgroundVertices))
    {
        // Clean up existing buffers
        GL::DeleteVertexArrays(1, &background.modelHandle);
        background.modelHandle = 0;
        GL::DeleteBuffers(1, &background.vertexBufferHandle);
        background.vertexBufferHandle = 0;
        GL::DeleteBuffers(1, &background.indexBufferHandle);
        background.indexBufferHandle = 0;
        background.indicesCount      = 0;

        // Resize CPU buffers
        backgroundVertices.resize(static_cast<std::size_t>(num_required_vertices));
        backgroundIndices.resize(static_cast<std::size_t>(num_required_indices));

        // Create new GPU buffers
        background.vertexBufferHandle = OpenGL::CreateBuffer(OpenGL::BufferType::Vertices, static_cast<GLsizeiptr>(backgroundVertices.size() * sizeof(backgroundVertices[0])));
        background.indexBufferHandle  = OpenGL::CreateBuffer(OpenGL::BufferType::Indices, static_cast<GLsizeiptr>(backgroundIndices.size() * sizeof(backgroundIndices[0])));

        const auto layout      = OpenGL::VertexBuffer{ background.vertexBufferHandle, OpenGL::BufferLayout{ { OpenGL::Attribute::Float2, OpenGL::Attribute::UByte4ToNormalized } } };
        background.modelHandle = OpenGL::CreateVertexArrayObject(layout, background.indexBufferHandle);

        return true; // New buffers need index data
    }
    return false; // No resize needed
}

void DemoBufferTypes::generateQuadVertices(int row, int column, const GridParams& grid_params, const AnimationParams& anim_params)
{
    const auto x = static_cast<float>(column * QuadSize - QuadSize);
    const auto y = static_cast<float>(row * QuadSize - QuadSize);

    const float tilt_amount = anim_params.quadTiltSize;

    // Generate noise-based color using class constants
    const float fx = x * NoiseFrequency;
    const float fy = y * NoiseFrequency;

    // HSV-based color animation for smoother, more vibrant transitions
    const float base_hue_noise = stb_perlin_fbm_noise3(fx, fy, anim_params.elapsedTime * 0.3f, NoiseLacunarity, NoiseGain, NoiseLayers);
    const float hue            = std::fmod(180.0f + base_hue_noise * 120.0f + anim_params.elapsedTime * 10.0f, 360.0f);

    // Keep saturation and value in pastel range for light, soft colors
    const float saturation_noise = stb_perlin_fbm_noise3(fx, fy, anim_params.elapsedTime * 0.2f + 10.0f, NoiseLacunarity, NoiseGain, NoiseLayers);
    const float saturation       = 0.3f + (saturation_noise * 0.1f + 0.1f) * 0.5f;

    const float value_noise = stb_perlin_fbm_noise3(fx, fy, anim_params.elapsedTime * 0.15f + 20.0f, NoiseLacunarity, NoiseGain, NoiseLayers);
    const float value       = 0.95f + (value_noise * 0.01f + 0.01f) * 0.03f;
    float       r_float = 0, g_float = 0, b_float = 0;
    ImGui::ColorConvertHSVtoRGB(hue / 360.0f, saturation, value, r_float, g_float, b_float);

    // Convert to 0-255 range for vertex colors
    const auto r = static_cast<unsigned char>(std::lround(r_float * 255.0f));
    const auto g = static_cast<unsigned char>(std::lround(g_float * 255.0f));
    const auto b = static_cast<unsigned char>(std::lround(b_float * 255.0f));

    const int vertex_index = (row * grid_params.numQuadsWide + column) * 4;

    // Create quad vertices
    const auto bottom_left = Vertex{
        .x = x, .y = y, .color = { r, g, b, 255 }
    };

    const auto bottom_right = Vertex{
        .x = x + QuadSize, .y = y, .color = { r, g, b, 255 }
    };

    const auto top_right = Vertex{
        .x = x + QuadSize + tilt_amount, .y = y + QuadSize, .color = { r, g, b, 255 }
    };

    const auto top_left = Vertex{
        .x = x + tilt_amount, .y = y + QuadSize, .color = { r, g, b, 255 }
    };

    backgroundVertices[static_cast<std::size_t>(vertex_index + 0)] = bottom_left;
    backgroundVertices[static_cast<std::size_t>(vertex_index + 1)] = bottom_right;
    backgroundVertices[static_cast<std::size_t>(vertex_index + 2)] = top_right;
    backgroundVertices[static_cast<std::size_t>(vertex_index + 3)] = top_left;
}

void DemoBufferTypes::updateBackgroundBuffersOnGPU(int num_required_vertices, bool indices_need_update) const
{
    // Update vertex buffer
    GL::BindBuffer(GL_ARRAY_BUFFER, background.vertexBufferHandle);
    GL::BufferData(GL_ARRAY_BUFFER, num_required_vertices * static_cast<GLsizeiptr>(sizeof(backgroundVertices[0])), nullptr, GL_STREAM_DRAW);
    GL::BindBuffer(GL_ARRAY_BUFFER, 0);

    const auto vertex_data_span = std::span{ backgroundVertices.data(), static_cast<std::size_t>(num_required_vertices) };
    OpenGL::UpdateBufferData(OpenGL::BufferType::Vertices, background.vertexBufferHandle, std::as_bytes(vertex_data_span));

    // Only update index buffer if it grew (indices don't change during animation)
    if (indices_need_update)
    {
        const auto index_data_span = std::span{ backgroundIndices.data(), static_cast<std::size_t>(background.indicesCount) };
        OpenGL::UpdateBufferData(OpenGL::BufferType::Indices, background.indexBufferHandle, std::as_bytes(index_data_span));
    }
}

void DemoBufferTypes::increase_number_of_villagers(std::size_t current_size)
{
    const auto  next_size = current_size << 1;
    const auto  size      = currentDisplaySize;
    std::size_t count     = 0;
    for (auto& villagerData : villagers)
    {
        if (villagerData.alive)
        {
            ++count;
        }
        else
        {
            villagerData.alive      = true;
            villagerData.shouldDraw = true;
            generateRandomVillager(villagerData, size);
            if (++count >= next_size)
            {
                return;
            }
        }
    }
    while (count < next_size)
    {
        villagers.emplace_back();
        generateRandomVillager(villagers.back(), size);
        ++count;
    }
}

void DemoBufferTypes::decrease_number_of_villagers(std::size_t current_size)
{
    const auto next_size        = static_cast<long>(current_size >> 1);
    const auto offscreen_length = currentDisplaySize.Length() * 0.75;
    for (auto iter_villager = villagers.begin() + next_size; iter_villager != villagers.end(); ++iter_villager)
    {
        auto& villagerData      = *iter_villager;
        villagerData.alive      = false;
        const auto to_offscreen = (villagerData.position - 0.5 * currentDisplaySize).Normalize();
        villagerData.targetPosition += to_offscreen * offscreen_length;
    }
}

void DemoBufferTypes::regenerate_all_villagers()
{
    const auto size = currentDisplaySize;
    for (auto& villagerData : villagers)
    {
        if (!villagerData.alive)
            continue;
        generateRandomVillager(villagerData, size);
    }
}

void DemoBufferTypes::generateRandomVillager(VillagerData& villagerData, const Math::vec2& screenSize) const
{
    const double scale       = util::random(32.0, 256.0);
    villagerData.targetScale = Math::vec2{ scale, scale };

    const double margin           = scale * 0.5;
    villagerData.targetPosition.x = util::random(margin, screenSize.x - margin);
    villagerData.targetPosition.y = util::random(margin, screenSize.y - margin);

    // Random rotation between 0 and 2 PI radians
    villagerData.targetRotation = util::random(0.0, 2.0 * std::numbers::pi);

    villagerData.positionOffset.x = villagerData.targetPosition.x;
    villagerData.positionOffset.y = villagerData.targetPosition.y;
    villagerData.scaleOffset      = Math::vec2{ scale, scale };
    villagerData.rotationSpeed    = util::random(-1.0, 1.0);
    villagerData.positionSpeed.x  = util::random(0.3, 0.8);
    villagerData.positionSpeed.y  = util::random(0.2, 0.6);
    villagerData.scaleSpeed.x     = util::random(0.5, 1.2);
    villagerData.scaleSpeed.y     = util::random(0.4, 1.0);
    villagerData.timeOffset       = util::random(0.0, std::numbers::pi * 2.0);
}

template <typename T>
void ease_to_target(T& current, const T& target, double delta_time, double weight = 1.0)
{
    const auto easing = std::min(delta_time * weight, 1.0);
    current += easing * (target - current);
}

void DemoBufferTypes::updateVillagers()
{
    const auto   environment  = Engine::GetWindowEnvironment();
    const double elapsed_time = environment.ElapsedTime;

    for (auto& villagerData : villagers)
    {
        if (villagerData.alive)
        {
            const double unique_time = elapsed_time + villagerData.timeOffset;

            // Animate position with gentle circular/figure-8 motion
            const double pos_x_wave = std::sin(unique_time * villagerData.positionSpeed.x) * 50.0;
            const double pos_y_wave = std::cos(unique_time * villagerData.positionSpeed.y) * 30.0;

            villagerData.targetPosition.x = villagerData.positionOffset.x + pos_x_wave;
            villagerData.targetPosition.y = villagerData.positionOffset.y + pos_y_wave;

            // Animate scale with gentle breathing effect
            const double scale_wave_x = std::sin(unique_time * villagerData.scaleSpeed.x) * 20.0;
            const double scale_wave_y = std::cos(unique_time * villagerData.scaleSpeed.y) * 15.0;

            villagerData.targetScale.x = villagerData.scaleOffset.x + scale_wave_x;
            villagerData.targetScale.y = villagerData.scaleOffset.y + scale_wave_y;

            // Ensure minimum scale
            villagerData.targetScale.x = std::max(villagerData.targetScale.x, 32.0);
            villagerData.targetScale.y = std::max(villagerData.targetScale.y, 32.0);

            // Animate rotation
            villagerData.targetRotation += villagerData.rotationSpeed * environment.DeltaTime;
        }
        else if (villagerData.shouldDraw)
        {
            const Math::vec2     villager_min = villagerData.position - 0.5 * villagerData.scale;
            const Math::vec2     villager_max = villagerData.position + 0.5 * villagerData.scale;
            constexpr Math::vec2 screen_min   = { 0.0, 0.0 };
            const Math::vec2     screen_max   = currentDisplaySize;
            if (villager_min.x >= screen_max.x || villager_max.x <= screen_min.x || villager_min.y >= screen_max.y || villager_max.y <= screen_min.y)
            {
                villagerData.shouldDraw = false;
                villagerData.position   = { 0.0, 0.0 };
                continue;
            }
        }

        if (villagerData.shouldDraw == true)
        {
            ease_to_target(villagerData.position, villagerData.targetPosition, environment.DeltaTime, 1.2);
            ease_to_target(villagerData.scale, villagerData.targetScale, environment.DeltaTime, 2.0);
            ease_to_target(villagerData.rotation, villagerData.targetRotation, environment.DeltaTime);
        }
    }
}
